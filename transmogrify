#!/usr/bin/env node
'use strict';

var file,
  fs = require('fs'),
  PNG = require('png-js'),
  argv = require('minimist')(process.argv.slice(2)),
  usage = 'Usage: \ttransmogrify <filename> [-f] [-h]\nHelp: \ttransmogrify draws a png to your console.\nOptions:\n\t-f --fit\tFit the image to the console size.\n\t-h --help\tRenders this message.',
  kdi = [
    94, 66, 108, 244, 115, 248, 229, 239, 60, 82, 73, 166, 169, 179, 181,
    236, 59, 61, 97, 78, 113, 43, 115, 130, 167, 134, 170, 148, 184, 151,
    253, 234, 237, 240, 101, 20, 31, 56, 104, 41, 83, 65, 119, 44, 50,
    74, 122, 132, 138, 161, 167, 128, 176, 165, 212, 108, 155, 179, 227, 252,
    158, 224, 254, 232, 234, 22, 237, 1, 5, 3, 243, 19, 12, 30, 27,
    96, 63, 244, 99, 64, 72, 46, 83, 106, 107, 118, 113, 67, 45, 79,
    14, 103, 110, 121, 117, 124, 162, 137, 247, 196, 203, 208, 204, 133, 129,
    139, 177, 205, 13, 211, 212, 143, 145, 190, 191, 214, 216, 226, 222, 7,
    152, 193, 159, 188, 224, 230, 15, 16, 233, 17, 235, 28, 22, 29, 238,
    239, 88, 240, 89, 58, 3, 242, 101, 25, 55, 26, 21, 6, 30, 32,
    33, 90, 96, 62, 63, 8, 244, 104, 105, 34, 76, 41, 72, 10, 47,
    48, 83, 70, 106, 102, 114, 82, 118, 119, 120, 37, 80, 44, 45, 49,
    86, 51, 87, 73, 109, 75, 111, 85, 121, 122, 123, 131, 125, 132, 168,
    136, 172, 246, 247, 166, 9, 197, 203, 173, 209, 174, 210, 127, 133, 135,
    128, 248, 139, 176, 183, 199, 205, 201, 207, 175, 211, 170, 213, 149, 144,
    150, 180, 154, 190, 156, 192, 220, 215, 186, 217, 11, 226, 228, 223, 250,
    251, 146, 152, 157, 193, 158, 195, 182, 188, 189, 225, 194, 229, 255, 231,
    0, 16, 232, 233, 4, 17, 234, 235, 2, 28, 236, 22, 23, 29, 237,
    238, 52, 239, 1, 88, 53, 240, 5, 89, 59, 58, 95, 3, 241, 242,
    243, 101, 18, 25, 19, 55, 20, 26, 12, 21, 24, 6, 61, 30, 31,
    32, 27, 33, 54, 90, 91, 96, 56, 62, 57, 63, 60, 8, 97, 244,
    98, 104, 99, 105, 35, 34, 64, 76, 36, 41, 66, 72, 40, 10, 46,
    47, 42, 48, 78, 83, 71, 70, 100, 106, 65, 102, 107, 114, 77, 82,
    112, 118, 84, 119, 113, 120, 38, 37, 67, 80, 39, 44, 69, 45, 43,
    49, 79, 86, 50, 51, 14, 87, 68, 73, 103, 109, 74, 75, 110, 111,
    115, 85, 116, 121, 81, 122, 117, 123, 94, 131, 124, 125, 126, 132, 162,
    168, 130, 136, 137, 172, 245, 246, 138, 247, 160, 166, 196, 9, 161, 197,
    198, 203, 202, 173, 208, 209, 167, 174, 204, 210, 92, 127, 164, 133, 93,
    135, 129, 128, 140, 248, 134, 139, 141, 176, 177, 183, 163, 199, 200, 205,
    165, 201, 13, 207, 169, 175, 206, 211, 171, 170, 212, 213, 142, 149, 143,
    144, 108, 150, 145, 180, 148, 154, 185, 190, 155, 156, 191, 192, 178, 220,
    214, 215, 179, 186, 216, 217, 184, 11, 221, 226, 227, 228, 222, 223, 249,
    250, 7, 251, 147, 146, 252, 152, 151, 157, 187, 193, 153, 158, 159, 195,
    181, 182, 218, 188, 219, 189, 224, 225, 253, 194, 230, 229, 254, 255, 15,
    231
  ],
  colors = [
    0x000000, 0x800000, 0x008000, 0x808000, 0x000080, 0x800080, 0x008080, 0xc0c0c0,
    0x808080, 0xff0000, 0x00ff00, 0xffff00, 0x0000ff, 0xff00ff, 0x00ffff, 0xffffff,
    0x000000, 0x00005f, 0x000087, 0x0000af, 0x0000d7, 0x0000ff, 0x005f00, 0x005f5f,
    0x005f87, 0x005faf, 0x005fd7, 0x005fff, 0x008700, 0x00875f, 0x008787, 0x0087af,
    0x0087d7, 0x0087ff, 0x00af00, 0x00af5f, 0x00af87, 0x00afaf, 0x00afd7, 0x00afff,
    0x00d700, 0x00d75f, 0x00d787, 0x00d7af, 0x00d7d7, 0x00d7ff, 0x00ff00, 0x00ff5f,
    0x00ff87, 0x00ffaf, 0x00ffd7, 0x00ffff, 0x5f0000, 0x5f005f, 0x5f0087, 0x5f00af,
    0x5f00d7, 0x5f00ff, 0x5f5f00, 0x5f5f5f, 0x5f5f87, 0x5f5faf, 0x5f5fd7, 0x5f5fff,
    0x5f8700, 0x5f875f, 0x5f8787, 0x5f87af, 0x5f87d7, 0x5f87ff, 0x5faf00, 0x5faf5f,
    0x5faf87, 0x5fafaf, 0x5fafd7, 0x5fafff, 0x5fd700, 0x5fd75f, 0x5fd787, 0x5fd7af,
    0x5fd7d7, 0x5fd7ff, 0x5fff00, 0x5fff5f, 0x5fff87, 0x5fffaf, 0x5fffd7, 0x5fffff,
    0x870000, 0x87005f, 0x870087, 0x8700af, 0x8700d7, 0x8700ff, 0x875f00, 0x875f5f,
    0x875f87, 0x875faf, 0x875fd7, 0x875fff, 0x878700, 0x87875f, 0x878787, 0x8787af,
    0x8787d7, 0x8787ff, 0x87af00, 0x87af5f, 0x87af87, 0x87afaf, 0x87afd7, 0x87afff,
    0x87d700, 0x87d75f, 0x87d787, 0x87d7af, 0x87d7d7, 0x87d7ff, 0x87ff00, 0x87ff5f,
    0x87ff87, 0x87ffaf, 0x87ffd7, 0x87ffff, 0xaf0000, 0xaf005f, 0xaf0087, 0xaf00af,
    0xaf00d7, 0xaf00ff, 0xaf5f00, 0xaf5f5f, 0xaf5f87, 0xaf5faf, 0xaf5fd7, 0xaf5fff,
    0xaf8700, 0xaf875f, 0xaf8787, 0xaf87af, 0xaf87d7, 0xaf87ff, 0xafaf00, 0xafaf5f,
    0xafaf87, 0xafafaf, 0xafafd7, 0xafafff, 0xafd700, 0xafd75f, 0xafd787, 0xafd7af,
    0xafd7d7, 0xafd7ff, 0xafff00, 0xafff5f, 0xafff87, 0xafffaf, 0xafffd7, 0xafffff,
    0xd70000, 0xd7005f, 0xd70087, 0xd700af, 0xd700d7, 0xd700ff, 0xd75f00, 0xd75f5f,
    0xd75f87, 0xd75faf, 0xd75fd7, 0xd75fff, 0xd78700, 0xd7875f, 0xd78787, 0xd787af,
    0xd787d7, 0xd787ff, 0xd7af00, 0xd7af5f, 0xd7af87, 0xd7afaf, 0xd7afd7, 0xd7afff,
    0xd7d700, 0xd7d75f, 0xd7d787, 0xd7d7af, 0xd7d7d7, 0xd7d7ff, 0xd7ff00, 0xd7ff5f,
    0xd7ff87, 0xd7ffaf, 0xd7ffd7, 0xd7ffff, 0xff0000, 0xff005f, 0xff0087, 0xff00af,
    0xff00d7, 0xff00ff, 0xff5f00, 0xff5f5f, 0xff5f87, 0xff5faf, 0xff5fd7, 0xff5fff,
    0xff8700, 0xff875f, 0xff8787, 0xff87af, 0xff87d7, 0xff87ff, 0xffaf00, 0xffaf5f,
    0xffaf87, 0xffafaf, 0xffafd7, 0xffafff, 0xffd700, 0xffd75f, 0xffd787, 0xffd7af,
    0xffd7d7, 0xffd7ff, 0xffff00, 0xffff5f, 0xffff87, 0xffffaf, 0xffffd7, 0xffffff,
    0x080808, 0x121212, 0x1c1c1c, 0x262626, 0x303030, 0x3a3a3a, 0x444444, 0x4e4e4e,
    0x585858, 0x626262, 0x6c6c6c, 0x767676, 0x808080, 0x8a8a8a, 0x949494, 0x9e9e9e,
    0xa8a8a8, 0xb2b2b2, 0xbcbcbc, 0xc6c6c6, 0xd0d0d0, 0xdadada, 0xe4e4e4, 0xeeeeee];

function h2r(hex) {
  var r = hex >> 16,
    g = hex >> 8 & 0xFF,
    b = hex & 0xFF;
  return [r, g, b];
}

function d(x, y) {
  x = x.slice ? x : h2r(x);
  y = y.slice ? y : h2r(y);
  return Math.abs(x[0] - y[0]) + Math.abs(x[1] - y[1]) + Math.abs(x[2] - y[2]);
}

function nn(node, value, depth, closest) {
  var color, ri, axis, branches, dist;
  if (closest === null) {
    closest = {idx: 0, dist: 0xFFFFFF};
  }
  color = h2r(colors[kdi[node]]);
  ri = node * 2 + 2;
  if (ri < kdi.length) {
    axis = depth % 3;
    branches = value[axis] < color[axis] ? [ri - 1, ri] : [ri, ri - 1];
    nn(branches[0], value, depth + 1, closest);
    if (Math.abs(value[axis] - color[axis]) < closest.dist) {
      nn(branches[1], value, depth + 1, closest);
    }
  } else {
    dist = d(color, value);
    if (dist < closest.dist) {
      closest.dist = dist;
      closest.idx = node;
    }
  }
  return kdi[closest.idx];
}

function fit(png, pixels) {
  var px = pixels;

  var cw = process.stdout.columns / 2 - 2;
  var ch = process.stdout.rows - 2;

  if(cw < png.width || ch < png.height) {
    var scale = Math.min(cw / png.width, ch / png.height);
    var r = [], g = [], b = [], counts = {};

    var pw = Math.floor(png.width * scale);
    var ph = Math.floor(png.height * scale);

    for (i = 0; i < pixels.length; i += 4) {
      var ri = i / 4;
      var col = Math.floor(scale * (ri % png.width));
      var row = Math.floor(scale * (ri / png.width));

      var idx = row * pw + col; 

      if(!r[idx]) {
        r[idx] = g[idx] = b[idx] = counts[idx] = 0;
      }
      r[idx] += pixels[i];
      g[idx] += pixels[i + 1];
      b[idx] += pixels[i + 2];
      counts[idx] += 1;
    }
    px = [];
    png.width = pw;
    png.height = ph;
    for(var i = 0; i < r.length; i++) {
      px.push(r[i] / counts[i], g[i] / counts[i], b[i] / counts[i], i % pw == pw - 1 ? 0 : 255);
    }
  }
  return px;
}

if(argv.h || argv.help || argv._.length < 1) {
  console.log(usage);
  process.exit();
}

file = process.argv[2];

fs.readFile(file, function (err, file) {
  var png;
  if (err) {
    throw 'Whoops: ' + err;
  }
  png = new PNG(file);
  
  png.decode(function (pixels) {
    if(argv.f || argv.fit) {
      pixels = fit(png, pixels);
    }
    var i, row = [], l = '\x1B[48;5;', r = 'm  \x1B[49m';
    for (i = 0; i < pixels.length; i += 4) {
      if (row.length === png.width) {
        console.log(row.join(''));
        row = [];
      }
      if (!pixels[i + 3]) {
        row.push('  ');
      } else {
        row.push(l + nn(0, [pixels[i], pixels[i + 1], pixels[i + 2]], 0, null) + r);
      }
    }
    if (row.length === png.width) {
      console.log(row.join(''));
    }
  });
});